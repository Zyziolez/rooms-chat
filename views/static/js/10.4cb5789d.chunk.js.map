{"version":3,"sources":["adminPanel/AdminPanel.js"],"names":["forEachPost","posts","array","length","forEach","post","push","title","text","date","id","Irritator","useState","login","setLogin","password","setPassword","display","setDisplay","style","width","height","background","color","position","top","type","value","onChange","e","target","onClick","axios","then","res","console","log","data","catch","err","AdminPanel","setPosts","setTitle","setText","setDate","setId","useEffect","get","fontFamily","tytul","dodajPost","map","ele","i","slice","tekst","modyfikujPost","idPosta"],"mappings":"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","file":"static/js/10.4cb5789d.chunk.js","sourcesContent":["import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\n\nlet gloBalBigBoj = false;\n\nconst forEachPost = (posts) => {\nconst array = [];\n\nif(posts.length > 0 ){\n    posts.forEach(post => {\n        // array.push(post.title)\n        array.push([post.title, post.text, post.date, post.id])\n    });\n}\n\nreturn array\n}\nconst Irritator = () => {\n    const [login,setLogin] = useState('')\n    const [password, setPassword] = useState('')\n    const [display, setDisplay] = useState('block')\n\n    const zaloguj = () => {\n        axios.post('https://itinit.pl:5000/loginadmin', {login: login, password: password})\n            .then(res => {\n                console.log(res.data)\n                if(res.data == 'T'){\n                    setDisplay('none')\n                }\n            })\n            .catch(err => console.log(err))\n    }\n\n    return(\n        <div style={{width:'100vw', height:'100vh', background: 'black', color: 'white', position: 'fixed', top: 0, display: display}} >\n            <h1 style={{color: 'pink'}} > Zaloguj sie </h1>\n             <label>login</label> <input type='text' value={login} onChange={e => setLogin(e.target.value) } /> <br></br>\n             <label>haslo</label> <input type='text' value={password} onChange={e => setPassword(e.target.value) } /> <br></br>\n            <button onClick={e => zaloguj()} > zaloguj </button>\n        </div>\n    )\n}\n\nexport default function AdminPanel() {\n    const [posts, setPosts] = useState('')\n    const [title,setTitle] = useState('')\n    const [text,setText] = useState('')\n    const [date,setDate] = useState('')\n    const [id,setId] = useState('')\n\n    useEffect(() => {\n        axios.get('https://itinit.pl:5000/')\n        .then(res => {\n        \n                setPosts(res.data)\n          \n        })\n        .catch(err => console.log(err))\n    }, [])\n\n    const usunPost = (idPosta) => {\n        axios.post('https://itinit.pl:5000/delete', {id: idPosta})\n            .catch(err => console.log(err))\n    }\n    const dodajPost = ( tytul, text, data) => {\n        axios.post('https://itinit.pl:5000/create', {\n            id: null,\n            title: tytul,\n            text: text,\n            date: data\n        })\n        .catch(err => console.log(err))\n    }\n    const modyfikujPost = (tytul, tekst, id) => {\n        setTitle(tytul)\n        setText(tekst)\n        setId(id)\n    }\n    const modyfikujPostOst = () => {\n        axios.post('https://itinit.pl:5000/modify', {\n            id: id,\n            title: title,\n            text: text\n        })\n        .catch(err => console.log(err))\n        setTitle('')\n        setText('')\n        setId('')\n    }\n\n    return (\n        <div style={{fontFamily: 'comic-sans'}} >\n            <p style={{color: 'green'}} >Info dla tych co tu trafia:</p>\n            <p> To jest panel jeszcze mocno niedopracowany: jak chcesz modyfikowac post,\n                 najpierw kliknij 'modyfikuj', potem w inpucie pojawi sie obecny post, zrob co chcesz i\n                  kliknij 'zatwierdz modyfikacje posta'. Jak chcesz dodac post, to tylko uzupelniasz inputy i klikasz \n                  'dodaj nowy post'. Jak usuniesz/dodasz/zmodyfikujesz post, odswiez strone\n                  (znaczy nie musisz ale wtedy bedziesz widzial wyniki) (ale bedziesz musial sie ponownie zalogowac lol) </p>\n             <br></br>\n            <button onClick={e => dodajPost(title, text, date)} >DODAJ NOWY POST</button>\n            <button onClick={e => modyfikujPostOst()} >ZATWIERDZ MODYFIKACJE POSTA</button>\n            <br></br>\n                <input type='text' value={title} onChange={e => setTitle(e.target.value)} />\n                <input type='text' value={text} onChange={e => setText(e.target.value)} />\n                <input type='date' value={date} onChange={e => setDate(e.target.value)} />\n            <h1>Wszystkie dostepne posty:</h1>\n            \n        {console.log(posts)}\n\n            {forEachPost(posts).map((ele, i) =>\n            <div key={i} >\n                <h2> {ele[0]} </h2> \n                <h3>{ele[1]}</h3>\n                <p style={{color: 'red'}} > data posta: {ele[2].slice(0, 10)} </p>\n                <button onClick={e=> modyfikujPost(ele[0], ele[1], ele[3])} >Modyfikuj</button> <button onClick={e => usunPost(ele[3])} >Usun</button>\n            </div>)}\n            {gloBalBigBoj ? null : <Irritator/>}\n        </div>\n    )\n}\n"],"sourceRoot":""}