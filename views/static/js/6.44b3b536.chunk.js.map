{"version":3,"sources":["components/other/UltimatePop.js","components/video stuff/Chat&Users.js","../node_modules/peerjs/dist sync","components/Room.js"],"names":["Input","isOpen","children","onClose","enabled","ReactDOM","createPortal","style","height","background","width","position","top","document","body","UltimatePop","open","text","setOpen","useState","setEnabled","useEffect","setTimeout","marginTop","marginLeft","transform","textAlign","padding","Chat","chat","newChat","slice","refer","useRef","current","scrollIntoView","behavior","block","className","overflow","length","map","message","i","ref","Users","users","Array","isArray","user","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","socket","openSocket","window","location","origin","secure","Room","setChat","goHome","setGoHome","setUsers","roomsName","setRoomsName","chatMessage","setChatMessage","maxUsers","setMaxUsers","ids","setIds","inputFocus","useRecoilState","pop","myPP","setMyPP","videoRef","idkRef","currId","href","replace","peer","Peer","idsCopy","arra","notMineDontTouch","emit","localStorage","getItem","on","conn","data","console","log","send","call","navigator","mediaDevices","getUserMedia","video","audio","stream","answer","remoteStream","srcObject","err","error","name","msg","prev","info","secret","reload","alert","a","then","connect","handleSendMessage","focus","onClick","muted","type","maxLength","value","onKeyPress","key","onChange","target","reportRoom","disconnect","to"],"mappings":"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","file":"static/js/6.44b3b536.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n//this component is the window that pops up when you haven't got you nick set\n\n//this is the window\nconst Input = ({isOpen, onClose, children, enabled}) => {\n    if(!isOpen ){\n        return null\n    }\n    return ReactDOM.createPortal(\n        <div  style={{height: '100vh', background: 'rgba(20, 20, 20, 0.677)', width: '100vw', position: 'fixed', top: '0'}} >\n            {children}\n        </div>, document.body\n    )\n}\n\n//this is the logic of the window\nexport default function UltimatePop({open, setOpen, text}) {\n    const [enabled, setEnabled] = useState(true)\n    useEffect(() => {\n        setTimeout(() => {\n            setEnabled(false)\n        }, 2000)\n    }, [])\n    return (\n        <div>\n            <Input isOpen={open}  enabled={enabled}  >\n            <div style={{ width: '25rem', background: 'white', position: 'absolute',height: '30rem', marginTop: '20vh', marginLeft:'50%', transform: 'translateX(-50%)', textAlign: 'center', padding: '2rem'}} >\n                <h1>{text} </h1>\n             </div>\n           </Input>\n        </div>\n    )\n}\n","import React, { useEffect, useRef } from 'react'\n\n//yes I will comment every component\n\nexport function Chat({chat}) { \n    const newChat = chat.slice(0)   \n    const refer = useRef()\n    // const newerChat = newChat.reverse()\n    useEffect(() => {\n        refer.current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n        })\n    }, [chat])\n    return (\n        <div className='chat-list' >\n            <ul style={{overflow: 'hidden'}} >\n                {newChat.length > 0 ? newChat.map((message, i) => \n                <li key={i} > <b>{`${message[0]}:`}</b>  {`${message[1]}`} </li>\n                ) : null}\n                <div ref={refer} ></div>\n            </ul>\n        </div>\n    )\n}\nexport function Users({users}){\n    return(\n        <ul>\n        { Array.isArray(users) ? users.map((user, i) => \n            <li key={i} > {user} </li>\n         ) : null}\n    </ul>\n    )\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 105;","import React, { useEffect, useState, useRef } from 'react'\nimport openSocket from 'socket.io-client'\nimport { Redirect } from 'react-router-dom';\nimport Peer from 'peerjs';\nimport {Chat, Users} from './video stuff/Chat&Users'\nimport { notMineDontTouch, reportRoom } from './other/functions';\nimport {pop} from '../index'\nimport {useRecoilState} from 'recoil'\nimport UltimatePop from './other/UltimatePop';\nimport MyVideo from './video stuff/MyVideo';\n\nconst socket = openSocket(window.location.origin, {secure: true});\n\n//this code is nasty so get ready\n\nexport default function Room() {\n    const [chat, setChat] = useState([])\n    const [goHome, setGoHome] = useState(false)\n    const [users, setUsers] = useState([])\n    const [roomsName, setRoomsName] = useState('')\n    const [chatMessage, setChatMessage] = useState('')\n    const [maxUsers, setMaxUsers] = useState(0)\n    const [ids, setIds] = useState([])\n    const inputFocus = useRef(null)\n    const [open, setOpen] = useRecoilState(pop)\n    const [myPP, setMyPP] = useState('')\n    const videoRef = useRef(null)\n    const idkRef = useRef(null)\n\n    //sends this rooms id from link to backend to recognize it\n    let currId = window.location.href\n    currId = currId.replace('https://itinit.pl/room/', '')\n\n    const peer = new Peer({\n        'iceServers': [{\n            \"urls\": \"stun.ipfire.org:3478\"\n          },\n          {\n            \"urls\": \"turn:numb.viagenie.ca\",\n            \"username\": \"zyziolez@gmail.com\",\n            \"credential\": \"Adminio@123\"\n          }]\n    })\n   \n    let idsCopy = ids.slice(0)\n    let arra = notMineDontTouch(idsCopy, myPP)\n\n\n    useEffect(() => {\n\n        //sends every time request to join the room (i should change that) *!*\n        socket.emit('join-user', currId, localStorage.getItem('nick'))\n\n        //peers stuff, stil a lot work to do\n        peer.on('open', function(id) {\n            socket.emit('rooms-ids', currId, id)\n            setMyPP(id)\n            \n          });\n        peer.on('connection', function(conn) {\n            conn.on('data', data => {\n                console.log(data)\n            })\n            conn.on('open', () => {\n                conn.send('hello')\n            })\n        })\n        peer.on('call', call => {\n            console.log('hejka dzwonionko')\n            navigator.mediaDevices.getUserMedia({video: true, audio: true}, (stream) => {\n                call.answer(stream); // Answer the call with an A/V stream.\n                call.on('stream', (remoteStream) => {\n                  idkRef.current.srcObject = remoteStream\n                    \n                });\n              }, (err) => {\n                console.error('Failed to get local stream', err);\n              });\n        })\n\n          \n        //sets messages to chat\n        socket.on('chat', (name, msg)=> {\n            if(msg != null){\n                setChat(prev => [...prev, [name, msg]])\n            }else{\n                console.log('wtf')\n            }  \n        })\n\n        //i know this part is trashy. Socket on the backend sends multiple messages and this shit recognizes it\n        socket.on('admin', (info, secret) => {\n            if(info == 'kick'){\n                setOpen(true)\n                setTimeout(() => {\n                    setOpen(false)\n                    setGoHome(true)\n                    window.location.reload()\n                }, 2000)\n                \n            }else if(info == 'users'){\n                setUsers(secret[0])\n                setMaxUsers(secret[1])\n            }else if(info == 'max-reached'){\n                alert(`Max number of guests reached!`)\n                setGoHome(true) \n                window.location.reload()\n            }else if(info === \"r-name\"){\n                setRoomsName(secret)\n             }else if(info === \"disc\"){\n                 window.location.reload()\n             }else if( info === \"ids\" ){\n                 setIds( secret )\n             }\n        })\n\n        const connect = async () => {\n            try{\n                navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: true\n                }).then( stream =>{\n                    videoRef.current.srcObject = stream\n                })\n            }catch(err) {\n                console.log('no i tu sie zesralo')\n            }\n        }\n\n        connect()\n\n        //that should be a cleanup but idk\n        return () => {\n            setChat([])\n            setUsers([])\n            window.location.reload()\n        }\n    }, [])\n\n        const returnHomeAndDisconnect = () => {\n            socket.disconnect()\n            setGoHome(true)\n        }\n        const handleSendMessage =() => {\n            if(chatMessage != ''){\n                socket.emit('chat', chatMessage, localStorage.getItem('nick'))\n                setChatMessage('')\n                inputFocus.current.focus()\n            }\n            \n        }\n\n        const handlePeerConnect = () => {\n            const conn = peer.connect(arra[0])\n                conn.on('open', () => {\n                    console.log('auba')\n                    conn.send('hi!')\n                })\n              \n        }\n        const call = () => {\n            navigator.mediaDevices.getUserMedia({video: true, audio: true}, (stream) => {\n                console.log(stream)\n            const call = peer.call(arra[0], stream);\n            call.on('stream', (remoteStream) => {\n                console.log('dzwonionko')\n              idkRef.current.srcObject = remoteStream\n                });\n            }, (err) => {\n                console.error('Failed to get local stream', err);\n            });\n        }\n        const enterHandle = (e) => {\n            if(e.key === \"Enter\"){\n                handleSendMessage()\n            }\n        }\n\n    return (\n        <div className='room' >\n            <UltimatePop open={open} setOpen={setOpen} text={`Could not find room with id: ${currId}`} />\n                <button onClick={call} > <h1>CALL</h1> </button>\n            \n            {/* <video autoPlay={true} width='340px' height='180px'  muted={true}  ref={videoRef} /> */}\n            <video  width='340px' height='180px'  muted={true}  ref={idkRef} />\n           \n            <div className='left' >\n            <h1>Chat:</h1>\n                <Chat chat={chat} />\n                <input type='text' ref={inputFocus} maxLength='150' value={chatMessage} onKeyPress={enterHandle} onChange={e => setChatMessage(e.target.value)} />\n                <button onClick={handleSendMessage} className='message-btn' >Send</button>\n            </div>\n\n            {console.log(ids)}\n            {console.log(myPP)}\n\n            <div className='right' >\n                <h1>Rooms name: {roomsName}</h1>\n                <h3> {users.length}/{maxUsers} users</h3>\n                <Users users={users} />\n                <button onClick={e => {\n                    reportRoom(currId) \n                    returnHomeAndDisconnect()\n                } } >Report this Room</button>\n            </div>\n            {console.log(idkRef)}\n            <button onClick={handlePeerConnect} > AAAAAAAAAAAAAAAAAAAAAAAAAAAAA </button>\n               \n            {goHome ? <Redirect to='/'/>  : null}\n\n        </div>\n    )\n    \n}\n\n\n\n// else if(info == \"ids\"){\n//     if(secret.length > 1){\n//         const secrets = secret.splice(0)\n//     const secretss = notMineDontTouch(secrets, localStorage.getItem('nick-id'))\n//     secretss.forEach(person => {\n//         const conn = peer.connect(person)\n//         conn.on('open', () =>{\n//             conn.send(localStorage.getItem('nick-id'))\n//         })\n//     });\n//     }\n// }"],"sourceRoot":""}